---
min_packer_version: 1.7.9
variables:
  # All the variables are set by the build_* script based on the path
  vm_name: image
  out_full_path: "{{ env `PWD` }}/out"
  vmx_full_path: "{{ user `out_full_path` }}/parent_image/parent_image.vmx"
  aquarium_bait_proxy_port: null # Local proxy port to bypass VPN routing
  username: packer
  password: packer

  # CD is used to enter recovery mode
  iso_full_path: "{{ env `PWD` }}/iso/MacOS-Catalina-10.15.7.iso"

builders:
  - type: vmware-vmx
    vm_name: "{{ user `vm_name` }}"
    display_name: "{{ user `vm_name` }}"
    source_path: "{{ user `vmx_full_path` }}"
    linked: true # Use base image to simplify the data transfer
    attach_snapshot: original
    output_directory: "{{ user `out_full_path` }}/{{ user `vm_name` }}"
    headless: true
    boot_wait: 2s
    boot_key_interval: 10ms
    # We don't use BIOS interface much to access recovery or EFI because it's buggy (VNC commands
    # are not passing properly due to some bug in VMWare which like "sleep" some time - makes delays
    # and eats the commands)
    boot_command: # Disable System Integrity Protection (SIP) to allow access to the disks.
      - <down><down><down><enter> # Quickly select to boot from CD drive in BIOS
      - <wait2m> # Wait for recovery to boot
      - <leftCtrlOn><leftShiftOn><f2><leftShiftOff><leftCtrlOff><wait1s> # Focus on Apple menu
      - <left><left> # Focus on Utiltiess menu
      - <down><down><down><down><enter><wait10s> # Select and execute Terminal
      - spctl kext-consent disable<enter><wait5s> # Disable kext verification
      - csrutil disable<enter><wait5s> # Disable System Integrity Protection to simplify access to disks
      - reboot<enter> # Reboot into usual system
    shutdown_command: "echo '{{ user `username` }}' | sudo -S shutdown -h now"
    ssh_username: "{{ user `username` }}"
    ssh_password: "{{ user `password` }}"
    ssh_proxy_host: 127.0.0.1 # Local proxy in order to bypass VPN routing
    ssh_proxy_port: "{{ user `aquarium_bait_proxy_port` }}"
    ssh_timeout: 10s
    ssh_read_write_timeout: 10s
    ssh_wait_timeout: 2m
    vmx_data:
      sata0:1.deviceType: "cdrom-image"
      sata0:1.fileName: "{{ user `iso_full_path` }}"
      sata0:1.present: "TRUE"
      bios.forceSetupOnce: "TRUE"

provisioners:
  - type: ansible
    command: ./run_ansible.sh
    user: "{{ user `username` }}"
    playbook_file: playbooks/ci_image.yml
    extra_arguments:
      - -e
      - ansible_sudo_pass={{ user `password` }}
      - -e
      - vmtools_vm_type=vmware
      - -e
      - jre_extract_path=/opt/srv/jre8
      - -e
      - jenkins_agent_ui=true # MacOS needs UI to work properly

post-processors:
  - type: shell-local # Execute a number of steps to complete the image
    command: ./run_packer_post-process.sh "{{ user `out_full_path` }}" "{{ user `vm_name` }}"
