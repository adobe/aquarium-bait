---
# Bootstrap file for AWS Windows images
# Will use the autogenerated password

version: 1.0
tasks:
  # Create the OpenSSH download public key script
  - task: writeFile
    inputs:
      - frequency: once
        destination: C:\ProgramData\ssh\download_ec2_pubkey.ps1
        content: |-
          #!powershell
          # Script downloads the OpenSSH pubkey from AWS EC2 instance metadata and set it
          $openSSHAuthorizedKeys = 'C:\ProgramData\ssh\administrators_authorized_keys'

          # Download the pubkey from ec2 metadata to key file
          $keyUrl = "http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key"
          $keyRespStream = [System.Net.WebRequest]::Create($keyUrl).GetResponse().GetResponseStream()
          $streamReader = New-Object System.IO.StreamReader $keyRespStream
          $streamReader.ReadToEnd() | Out-File -FilePath $openSSHAuthorizedKeys -Encoding ASCII

          # Ensure access control on authorized_keys meets the requirements
          $acl = Get-ACL -Path $openSSHAuthorizedKeys
          $acl.SetAccessRuleProtection($True, $True)
          Set-Acl -Path $openSSHAuthorizedKeys -AclObject $acl
          $acl = Get-ACL -Path $openSSHAuthorizedKeys
          $ar = New-Object System.Security.AccessControl.FileSystemAccessRule( `
              "NT Authority\Authenticated Users", "ReadAndExecute", "Allow")
          $acl.RemoveAccessRule($ar)
          $ar = New-Object System.Security.AccessControl.FileSystemAccessRule( `
              "BUILTIN\Administrators", "FullControl", "Allow")
          $acl.RemoveAccessRule($ar)
          $ar = New-Object System.Security.AccessControl.FileSystemAccessRule( `
              "BUILTIN\Users", "FullControl", "Allow")
          $acl.RemoveAccessRule($ar)
          Set-Acl -Path $openSSHAuthorizedKeys -AclObject $acl

  - task: executeScript
    inputs:
      - frequency: once
        type: powershell
        runAs: localSystem
        content: |-
          write-output "Running User Data Script"
          write-host "(host) Running User Data Script"
 
          Set-ExecutionPolicy Unrestricted -Scope LocalMachine -Force -ErrorAction Ignore
 
          # Don't set this before Set-ExecutionPolicy as it throws an error
          $ErrorActionPreference = "stop"
 
          # Remove HTTP listener
          Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse
 
          # Create a self-signed certificate to let ssl work
          $Cert = New-SelfSignedCertificate -CertstoreLocation Cert:\LocalMachine\My -DnsName "packer"
          New-Item -Path WSMan:\LocalHost\Listener -Transport HTTPS -Address * -CertificateThumbPrint $Cert.Thumbprint -Force
 
          # WinRM
          write-output "Setting up WinRM"
          write-host "(host) setting up WinRM"
 
          cmd.exe /c winrm quickconfig -q
          cmd.exe /c winrm set "winrm/config" '@{MaxTimeoutms="1800000"}'
          cmd.exe /c winrm set "winrm/config/winrs" '@{MaxMemoryPerShellMB="1024"}'
          cmd.exe /c winrm set "winrm/config/service" '@{AllowUnencrypted="false"}'
          cmd.exe /c winrm set "winrm/config/client" '@{AllowUnencrypted="false"}'
          cmd.exe /c winrm set "winrm/config/service/auth" '@{Basic="true"}'
          cmd.exe /c winrm set "winrm/config/client/auth" '@{Basic="true"}'
          cmd.exe /c winrm set "winrm/config/service/auth" '@{CredSSP="true"}'
          cmd.exe /c winrm set "winrm/config/listener?Address=*+Transport=HTTPS" "@{Port=`"5986`";Hostname=`"packer`";CertificateThumbprint=`"$($Cert.Thumbprint)`"}"
          cmd.exe /c netsh advfirewall firewall set rule group="remote administration" new enable=yes
          cmd.exe /c netsh firewall add portopening TCP 5986 "Port 5986"
          cmd.exe /c net stop winrm
          cmd.exe /c sc config winrm start=auto
          cmd.exe /c net start winrm
 
      # Reset the EC2Launch V2 when it's stopped to run its run-once tasks every boot.
      # It's particularly hard with EC2Launch V2 because it's a bit different from V1 - uses
      # states which are impossible to modify when the EC2Launch is running, so we creating
      # a new scheduled event that monitors for `Amazon EC2Launch` service to stop and resets it.
      - frequency: once
        type: powershell
        runAs: localSystem
        content: |-
          $name = "Reset EC2Launch"
          $desc = "This task resets the EC2Launch V2 state to regenerate Administrator password on next boot"

          $action = New-ScheduledTaskAction -execute "C:\Program Files\Amazon\EC2Launch\EC2Launch.exe" -argument "reset"

          $trigger_class = Get-CimClass -ClassName MSFT_TaskEventTrigger -Namespace Root/Microsoft/Windows/TaskScheduler:MSFT_TaskEventTrigger
          $trigger = New-CimInstance -CimClass $trigger_class -ClientOnly
          $trigger.Subscription = @"
          <QueryList>
            <Query Id="0" Path="Amazon EC2Launch">
              <Select Path="Amazon EC2Launch">
                *[System[(Level=4 or Level=0) and (EventID=1)] and EventData[Data='Service: Succeeded in changing the service state to STOPPED.']]
              </Select></Query></QueryList>
          "@

          $principal = New-ScheduledTaskPrincipal -UserId System -LogonType S4U
          $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries 

          Register-ScheduledTask -TaskName $name -Trigger $trigger -Action $action -Description $desc -Principal $principal -Settings $settings

      # Add SSH public key receiver from AWS EC2 MetaData upon instance startup
      - frequency: once
        type: powershell
        runAs: localSystem
        content: |-
          $name = "Download AWS EC2 OpenSSH public key"
          $desc = "Automatically downloads the AWS EC2 instance public key to allow the Administrator access"

          $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-NoProfile -File C:\ProgramData\ssh\download_ec2_pubkey.ps1'
          $trigger = New-ScheduledTaskTrigger -AtStartup
          $principal = New-ScheduledTaskPrincipal -UserId System -LogonType S4U
          $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries 

          Register-ScheduledTask -TaskName $name -Trigger $trigger -Action $action -Description $desc -Principal $principal -Settings $settings
