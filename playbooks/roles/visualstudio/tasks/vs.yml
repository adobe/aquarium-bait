---
- name: VS will be installed to the next directory
  when: visualstudio_install_path | length > 0
  debug:
    var: visualstudio_install_path

- name: Download Visual Studio archive to the environment
  include_role:
    name: download
  vars:
    download_url: '{{ visualstudio_download_url }}'
    download_sum: '{{ visualstudio_download_sum }}'

- name: Unzip the VisualStudio archive
  win_unzip:
    src: '{{ download_path }}'
    dest: C:\tmp\vs

- name: Lookup the layout subdirectory
  win_find:
    paths: C:\tmp\vs
    file_type: directory
  register: reg_vs_layout_dir
  failed_when: reg_vs_layout_dir.matched != 1  # Layout dir have to be the only one

- name: Switch EdgeUpdate/InstallDefault to 1 - checked by installer
  win_regedit:
    path: HKLM:\SOFTWARE\Policies\Microsoft\EdgeUpdate
    name: InstallDefault
    data: 1
    type: dword

- name: Detect the visual studio install certificates
  win_find:
    paths: '{{ (reg_vs_layout_dir.files | first).path }}\certificates'
    patterns: '*.cer'
    recurse: true
  register: reg_vs_install_certs
  failed_when: reg_vs_install_certs.matched < 1

- name: Register VisualStudio Install Certificates
  win_certificate_store:
    file_type: der
    store_location: LocalMachine
    store_name: Root
    state: present
    path: "{{ item.path }}"
  with_items: '{{ reg_vs_install_certs.files }}'

# Will execute copy to the Response.json in case override file with pattern "vs*.json" is here
- block:
    - name: Locate the visual studio installer Response answers
      win_find:
        paths: C:\tmp\vs
        patterns: vs*.json
      register: reg_vs_installer_answers

    - name: Copy the response answers override to the installer directory
      when: reg_vs_installer_answers.matched == 1
      win_copy:
        src: '{{ (reg_vs_installer_answers.files | first).path }}'
        dest: '{{ (reg_vs_layout_dir.files | first).path }}\Response.json'
        remote_src: true

# In case it fails - you can check the log file:
# C:\Users\packer\AppData\Local\Temp\dd_installer_<datetime>.log
# Will cause 3010 (reboot needed) so skipping it
- name: Install VisualStudio
  win_command: >
    {{ (reg_vs_layout_dir.files | first).path }}\vs_setup.exe
    --in "{{ (reg_vs_layout_dir.files | first).path }}\Response.json"
    {% if visualstudio_install_path %}--installPath "{{ visualstudio_install_path }}"{% endif %}
    --noRestart --noWeb --force --quiet --wait
  register: reg_vs_install_result
  failed_when: reg_vs_install_result.rc not in [0, 3010]  # Describes reboot is needed

# Locate devenv.exe path in registry to find the path to IDE directory
- name: Locate VS path using registry
  win_shell: >
    (Get-ItemPropertyValue -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\devenv.exe'
    -Name '(default)').Trim('"') | Split-Path | Split-Path | Split-Path
  register: reg_vs_path

- name: Put the vs path to visualstudio_install_path variable
  set_fact:
    visualstudio_install_path: "{{ reg_vs_path.stdout_lines | first }}"

- name: Check the VS was installed correctly
  win_stat:
    path: '{{ visualstudio_install_path }}\{{ item }}'
  with_items:
    - Common7\IDE\devenv.exe
    - Common7\IDE\devenv.com
    - Common7\IDE\StorePID.exe
    - Common7\IDE\Extensions\TestPlatform\vstest.console.exe
    - MSBuild\Current\Bin\MSBuild.exe
    - VC\Auxiliary\Build\vcvars64.bat
  register: reg_stat_file
  failed_when: not reg_stat_file.stat.exists

- name: Return EdgeUpdate/InstallDefault back to 0 (OSOT default)
  win_regedit:
    path: HKLM:\SOFTWARE\Policies\Microsoft\EdgeUpdate
    name: InstallDefault
    data: 0
    type: dword

- name: Set system env variable of VS location
  win_environment:
    level: machine
    state: present
    name: VS_LOCATION
    value: '{{ visualstudio_install_path }}'

# Install license watcher script
- name: Create interface directory
  win_file:
    path: C:\interface
    state: directory

- name: Create srv directory
  win_file:
    path: C:\srv
    state: directory

- name: Store vs_license_watcher script
  win_copy:
    src: vs_license_watcher.ps1
    dest: C:\srv\vs_license_watcher.ps1

- name: Create scheduled task to run license watcher on boot
  win_scheduled_task:
    name: vs_license_watcher
    description: Run powershell script to allow users to register license for Visual Studio
    actions:
      - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
        arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\srv\vs_license_watcher.ps1
    triggers:
      - type: boot
    username: SYSTEM
    state: present
