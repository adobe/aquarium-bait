---
- name: Set fact with downloaded file for use from caller role
  set_fact:
    '{{ download_result_var }}': '{% if inventory_hostname == "localhost" %}{{ playbook_dir }}/files/{{ download_mac_dir }}{% else %}{{ download_lin_tmp }}{% endif %}/{{ download_url | basename }}'
    download_local_path: '{{ download_lin_dir }}/{{ download_url | basename }}'

- name: Create download directory
  file:
    path: '{{ download_lin_tmp }}'
    state: directory

- name: Get archive {{ download_local_path }} from the localhost files
  ignore_errors: true
  register: reg_remote_file
  copy:
    src: '{{ download_local_path }}'
    dest: '{{ vars[download_result_var] }}'

- name: When the localhost file is not available - download it
  when: reg_remote_file.failed
  block:
    - name: Download {{ download_url }} binary and verify checksum
      delegate_to: localhost
      get_url:
        url: '{{ download_url }}'
        headers: '{{ download_headers }}'
        dest: '{{ playbook_dir }}/files/{{ download_local_path }}'
        mode: '0440'
        checksum: '{{ download_checksum }}'

    - name: Get archive {{ download_local_path }} from the localhost files
      copy:
        src: '{{ download_local_path }}'
        dest: '{{ vars[download_result_var] }}'

# We need to validate file when it's copied by the next reasons:
# - the localhost copied file could be corrupted
# - during making of playbooks it's easy to forgot to update checksum of the file
# - the copy process potentially could transfer files wrong
- name: Make sure the copied file {{ vars[download_result_var] }} checksum is ok
  register: reg_remote_file
  stat:
    path: '{{ vars[download_result_var] }}'
    checksum_algorithm: '{{ download_checksum.split(":") | first }}'
  failed_when: reg_remote_file.stat.checksum != (download_checksum.split(":") | last)
