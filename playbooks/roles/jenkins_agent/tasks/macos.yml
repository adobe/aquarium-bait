---
- name: Add jenkins group
  become: true
  group:
    name: jenkins
    gid: 5001

- name: Add user jenkins with group jenkins
  become: true
  user:
    name: jenkins
    group: jenkins
    groups:
      - _developer  # Developer group needed to use DevToolsSecurity mode
    uid: 5001
    comment: Jenkins

- name: Enabling the DevToolsSecurity mode in order to allow debugging of the running processes
  become: true
  command: DevToolsSecurity -enable

- name: Create extract directory
  become: true
  file:
    path: "{{ jenkins_agent_path }}"
    state: directory

- name: Store jenkins agent executable scripts
  become: true
  copy:
    src: mac/jenkins_agent.sh
    dest: "{{ jenkins_agent_path }}/jenkins_agent.sh"
    owner: root
    group: wheel
    mode: "0755"

- when: jenkins_agent_ui | bool
  tags: jenkins_agent_service_config
  block:
    - name: Making jenkins user to autologin
      become: true
      command: defaults write /Library/Preferences/com.apple.loginwindow.plist autoLoginUser jenkins

    - name: Put kcpassword generator script to the system
      become: true
      copy:
        src: mac/autologin_kcpassword.sh
        dest: /tmp/autologin_kcpassword.sh
        owner: root
        group: wheel
        mode: "0750"

    # The password is needed for autologin, so generating and set it
    - name: Create kcpassword file for autologin
      become: true
      command: /tmp/autologin_kcpassword.sh
      args:
        stdin: jenkins  # Jenkins password is "jenkins"

    - name: Put the same password for jenkins user
      become: true
      user:
        name: jenkins
        password: jenkins

    # If user was just created - during the first run macos asks him about the stuff like data
    # pivacy, siri etc. If we will just reboot - the next boot will simple skip the questions.
    # https://derflounder.wordpress.com/2018/04/04/suppressing-the-data-privacy-pop-up-window-on-macos-high-sierra/
    - name: Reboot the system in order to trigger the first user run
      become: true
      command: shutdown -r +1  # Reboot halts packer for some reason, so using this dirty hack

    # VM will reboot and restore ssh connection
    - name: Wait for ssh connection
      wait_for_connection:
        delay: 200

    - name: Wait for jenkins user to fill its home directory
      wait_for:
        path: /Users/jenkins/Desktop

    - name: Wait for sudo to be available
      command: sudo --stdin echo ok
      args:
        stdin: '{{ ansible_sudo_pass | default("") }}'
      retries: 20  # sudo could take a while to complete this become
      delay: 10
      register: reg_result
      until: reg_result.rc == 0

    - name: Create jenkins user LaunchAgents directory
      become: true
      file:
        path: /Users/jenkins/Library/LaunchAgents
        state: directory

    - name: Store LaunchAgent plist file for agent autorun during user login
      become: true
      template:
        src: aquarium.ci.agent.plist.j2
        dest: /Users/jenkins/Library/LaunchAgents/aquarium.ci.agent.plist
        owner: root
        group: wheel
        mode: "0644"
      vars:
        java_home: "{{ jenkins_agent_java_home }}"
        config_url: "{{ jenkins_agent_config_url }}"
        script_path: "{{ jenkins_agent_path }}/jenkins_agent.sh"

    - name: Disable jenkins user screensaver
      become: true
      command: sudo -u jenkins defaults -currentHost write com.apple.screensaver idleTime 0

    - name: Disable jenkins user save windows on logout and restore on login
      become: true
      command: sudo -u jenkins defaults -currentHost write com.apple.loginwindow TALLogoutSavesState 0

    # Hack to allow user apps to access external disks (only AWS option for mounted disks)
    # Works for MacOS 13.6.1, 14.5
    # In the future csreq (7th field NULL right now) could be required, but right now if it's not set -
    # the rule works without validation of the app. Decode: `echo "fade0c..." | xxd -r -p | csreq -r- -t`
    # and to get the csreq you will need to use codesign -v -dr - PATH 2>&1 | grep '^\(designated\|Identifier\)'
    - name: Allow jenkins user apps to access external drives
      become: true
      command:
        argv:
          - sqlite3
          - /Users/jenkins/Library/Application Support/com.apple.TCC/TCC.db
          # Insert in the fields that matters - for the rest we're using defaults
          - >
            INSERT INTO access
            (service, client, client_type, auth_value, auth_reason, auth_version, indirect_object_identifier_type, flags)
            VALUES ('kTCCServiceSystemPolicyRemovableVolumes', '{{ item }}', 1, 2, 4, 1, 0, 0);
      loop:
        - /bin/sh  # Need to allow agent init script to work
        - /opt/srv/jre/bin/java  # Jenkins agent main executor (not affected by sh rule, yep)

# Launching as LaunchDaemon have some benefits, but in general will limit the ability of jenkins agent to utilize
# sometimes necesary macos services like keystore, so choose wisely.
- name: Store LaunchDaemon plist file for agent autorun during system startup
  when: not jenkins_agent_ui | bool
  tags: jenkins_agent_service_config
  become: true
  template:
    src: aquarium.ci.agent.plist.j2
    dest: /Library/LaunchDaemons/aquarium.ci.agent.plist
    owner: root
    group: wheel
    mode: "0644"
  vars:
    java_home: "{{ jenkins_agent_java_home }}"
    config_url: "{{ jenkins_agent_config_url }}"
    script_path: "{{ jenkins_agent_path }}/jenkins_agent.sh"
