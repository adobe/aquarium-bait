---
min_packer_version: 1.7.9
variables:
  # Variables are set by the build_image.sh script based on the spec path
  bait_path: .
  image_name: image
  out_full_path: "{{ env `PWD` }}/out"
  aquarium_bait_proxy_port: null  # Local proxy port to bypass VPN routing
  username: packer
  password: packer

  iso_full_path: "{{ user `bait_path` }}/init/iso/ubuntu-22.04.2-live-server-amd64.iso"
  init_vmx_full_path: "{{ user `bait_path` }}/init/vmx/{{ user `image_name` }}/{{ user `image_name` }}.vmx"

builders:
  - type: vmware-vmx  # Use vmx init to describe the steps and control the VM parameters exactly
    vm_name: "{{ user `image_name` }}"
    display_name: "{{ user `image_name` }}"
    source_path: "{{ user `init_vmx_full_path` }}"
    linked: false  # Create full copy to unlink from init template
    output_directory: "{{ user `out_full_path` }}/{{ user `image_name` }}"
    headless: true
    boot_wait: 2m  # Till the first installation screen
    boot_command:
      - <enter><wait1s>  # Select default English language
      - <enter><wait1s>  # Select done on keyboard layout for English US
      - <enter><wait1s>  # Select ordinary install of ubuntu server
      - <enter><wait1s>  # Select continue without network
      - <enter><wait1s>  # Select done without proxy
      - <enter><wait1s>  # Select done without altering package mirror
      - <enter><wait1s>  # Skip updating to not waste time
      - <down><down><spacebar><down><down><enter><wait1s>  # Disable LVM and press Done
      - <enter><wait1s>  # Select done without modifying the disk layout
      - <tab><enter><wait1s>  # Confirm destructive action and continue

      - "{{ user `username` }}<tab>"  # Put name
      - "{{ user `image_name` }}<tab>"  # Put server name
      - "{{ user `username` }}<tab>"  # Put username
      - "{{ user `password` }}<tab>"  # Put password
      - "{{ user `password` }}<tab>"  # Put confirm password
      - <enter><wait1s>  # Set the user and continue

      - <enter><wait1s>  # Skip ubuntu pro setup
      - <spacebar><tab><tab><enter><wait1s>  # Enable openssh and continue

      - <wait3m>  # Install process started and will need just a reboot

      - <tab><tab><enter><wait10s>  # Select reboot now and press on it
      - <enter>  # Don't remove CDRom and just reboot

      - <wait1m>  # Wait for reboot
    shutdown_command: "echo '{{ user `username` }}' | sudo -S shutdown -P now"
    ssh_username: "{{ user `username` }}"
    ssh_password: "{{ user `password` }}"
    ssh_proxy_host: 127.0.0.1  # Local proxy in order to bypass VPN routing
    ssh_proxy_port: "{{ user `aquarium_bait_proxy_port` }}"
    ssh_timeout: 10s
    ssh_read_write_timeout: 10s
    ssh_wait_timeout: 2m
    # Dynamically create the main disk
    disk_additional_size: [204800]  # 200GB
    disk_adapter_type: sata
    vmdk_name: MainDisk
    disk_type_id: 1  # Sparse disk to replace .vmdk `parentFileNameHint` absolute path in the linked clones
    vmx_data:
      sata0:1.fileName: "{{ user `iso_full_path` }}"
      sata0:0.present: "TRUE"  # Enable the main disk

provisioners:
  - type: ansible
    command: "{{ user `bait_path` }}/scripts/run_ansible.sh"
    playbook_file: "{{ user `bait_path` }}/playbooks/base_image.yml"
    ansible_env_vars:
      - PROXY_REMOTE_LISTEN={{ build `PackerHTTPIP` }}
    extra_arguments:
      - -e
      - ansible_sudo_pass={{ user `password` }}
      - -e
      - vmtools_vm_type=vmware

    # scp causes issues while running on OpenSSH client >9
    use_sftp: true
